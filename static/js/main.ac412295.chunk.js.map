{"version":3,"sources":["Components/utilities/BooksAPI.js","Components/Book.js","Components/Shelf.js","Components/BookList.js","Components/Search.js","Components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","updateShelf","e","_this","props","moveBookCallback","target","value","react_default","a","createElement","className","style","width","height","backgroundImage","this","imgUrl","onChange","bind","disabled","title","authors","Component","Shelf","shelfFriendlyName","map","key","Components_Book","BookList","Components_Shelf","filter","react_router_dom","to","Search","state","foundBooks","searchBooks","resultArray","BooksAPI","result","length","b","getBookLocalShelf","imageLinks","thumbnail","setState","bookId","localBook","currentBooks","changeQuery","moveBook","newShelf","bookIndex","findIndex","obj","_this2","onClick","loadBooksHandler","type","placeholder","event","BooksApp","loadBooksFromServer","forEach","newBook","prevState","basename","react_router","exact","path","render","Components_BookList","Components_Search","React","ReactDOM","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ac412295.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, {Component} from 'react'\r\n\r\nclass Book extends Component{\r\n  updateShelf = (e) =>{\r\n    this.props.moveBookCallback(this.props.id, e.target.value);\r\n  }\r\n    render(){\r\n        return(\r\n            <div className=\"book\">\r\n            <div className=\"book-top\">\r\n              <div className=\"book-cover\" style={{ width: 128, height: 192, backgroundImage: `url(${this.props.imgUrl})` }}></div>\r\n              <div className=\"book-shelf-changer\">\r\n                <select onChange={this.updateShelf.bind(this)} value={this.props.shelf}>\r\n                  <option value=\"move\" disabled>Move to...</option>\r\n                  <option value=\"currentlyReading\">Currently Reading</option>\r\n                  <option value=\"wantToRead\">Want to Read</option>\r\n                  <option value=\"read\">Read</option>\r\n                  <option value=\"none\">None</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"book-title\">{this.props.title}</div>\r\n            <div className=\"book-authors\">{this.props.authors}</div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Book","import React, { Component } from \"react\";\r\n\r\n// Components:\r\nimport Book from \"./Book\";\r\n\r\nclass Shelf extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{this.props.shelfFriendlyName}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {this.props.books\r\n              .map(book => {\r\n                return (\r\n                  <li key={book.id}>\r\n                    <Book\r\n                      id={book.id}\r\n                      title={book.title}\r\n                      authors={book.authors}\r\n                      imgUrl={book.imgUrl}\r\n                      shelf = {book.shelf}\r\n                      moveBookCallback={this.props.moveBookCallback}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shelf;\r\n","import React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n// UI Components:\r\nimport Shelf from './Shelf'\r\n\r\nclass BookList extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <Shelf books={this.props.books.filter(book => book.shelf === 'currentlyReading' )} \r\n                shelfFriendlyName='Currently Reading'\r\n                moveBookCallback={this.props.moveBookCallback} />\r\n\r\n                <Shelf books={this.props.books.filter(book => book.shelf === 'wantToRead' )} \r\n                shelfFriendlyName='Want to Read'\r\n                moveBookCallback={this.props.moveBookCallback} />\r\n\r\n                <Shelf books={this.props.books.filter(book => book.shelf === 'read' )} \r\n                 shelfFriendlyName='Read'\r\n                moveBookCallback={this.props.moveBookCallback} />\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n            <Link to ='/search' >Search</Link>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BookList","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./utilities/BooksAPI\";\r\n\r\n// UI Components:\r\nimport Shelf from \"./Shelf\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n    foundBooks: []\r\n  };\r\n\r\n  searchBooks = query => {\r\n    let resultArray = [];\r\n    BooksAPI.search(query).then(result => {\r\n      \r\n      // Only if result is defined and more than 0:\r\n      if (result && result.length > 0) {\r\n        resultArray = result.map(b => ({\r\n          id: b.id,\r\n          title: b.title,\r\n          authors: b.authors,\r\n          shelf: this.getBookLocalShelf(b.id),\r\n          // showing placeholder image for results that has no cover\r\n          imgUrl: b.imageLinks == null ? \r\n          './images/noImage.jpg'\r\n          : b.imageLinks.thumbnail\r\n        }));\r\n      }\r\n      this.setState(() => ({\r\n        foundBooks: resultArray\r\n      }));\r\n    });\r\n  };\r\n\r\n  getBookLocalShelf = bookId => {\r\n    // If book avilable locally, return its shelf, otherwise return 'none'\r\n    const localBook = this.props.currentBooks.filter(b => b.id === bookId);\r\n    if (localBook.length > 0) {\r\n      return localBook[0].shelf;\r\n    } else {\r\n      return \"none\";\r\n    }\r\n  };\r\n\r\n  changeQuery = query => {  \r\n    // Search books:\r\n    this.searchBooks(query)\r\n\r\n    // Update query in state\r\n    this.setState(() => ({\r\n      query: query\r\n    }));\r\n  };\r\n\r\n  moveBook = (id, newShelf) => {\r\n    let currentBooks = this.state.foundBooks;\r\n\r\n    // Find index of book object using findIndex method:\r\n    const bookIndex = currentBooks.findIndex(obj => obj.id === id);\r\n\r\n    // Update book's shelf:\r\n    currentBooks[bookIndex].shelf = newShelf;\r\n\r\n    // Update shelf on server:\r\n\r\n    BooksAPI.update(currentBooks[bookIndex], newShelf);\r\n\r\n    // Update status:\r\n    this.setState({\r\n      foundBooks: currentBooks\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search-books\">\r\n          <div className=\"search-books-bar\">\r\n            <Link\r\n              className=\"close-search\"\r\n              to=\"/\"\r\n              onClick={() => {\r\n                // Reload books from server when going back to book list:\r\n                this.props.loadBooksHandler();\r\n              }}\r\n            >\r\n              Home\r\n            </Link>\r\n            <div className=\"search-books-input-wrapper\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search by title or author\"\r\n                value={this.state.query}\r\n                onChange={event => {\r\n                  this.changeQuery(event.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <div className=\"list-books\">\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n              {// Only render if there's result:\r\n\r\n              this.state.foundBooks.length > 0 && (\r\n                <Shelf\r\n                  books={this.state.foundBooks}\r\n                  shelfFriendlyName=\"Search Result\"\r\n                  moveBookCallback={this.moveBook}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./utilities/BooksAPI\";\r\nimport \"../App.css\";\r\n\r\n// UI Components:\r\nimport BookList from \"./BookList\";\r\nimport Search from \"./Search\";\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: []\r\n  };\r\n\r\n  moveBook = (id, newShelf) => {\r\n    let currentBooks = this.state.books;\r\n\r\n    // Find index of book object using findIndex method:\r\n    const bookIndex = currentBooks.findIndex(obj => obj.id === id);\r\n\r\n    // Update book's shelf:\r\n    currentBooks[bookIndex].shelf = newShelf;\r\n\r\n    // Update shelf on server:\r\n\r\n    BooksAPI.update(currentBooks[bookIndex], newShelf);\r\n    // Update status:\r\n    this.setState({\r\n      books: currentBooks\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadBooksFromServer();\r\n  }\r\n\r\n  loadBooksFromServer = () => {\r\n    //Reset book state:\r\n    this.setState({\r\n      books: []\r\n    });\r\n    BooksAPI.getAll().then(result => {\r\n      result.forEach(b => {\r\n        const newBook = {\r\n          id: b.id,\r\n          title: b.title,\r\n          authors: b.authors,\r\n          shelf: b.shelf,\r\n          imgUrl:\r\n            b.imageLinks == null\r\n              ? /* showing placeholder image for results that has no cover */\r\n                \"./images/noImage.jpg\"\r\n              : b.imageLinks.thumbnail\r\n        };\r\n        this.setState(prevState => ({\r\n          books: prevState.books.concat(newBook)\r\n        }));\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Router basename=\"/\">\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <BookList\r\n                books={this.state.books}\r\n                moveBookCallback={this.moveBook}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/search\"\r\n            render={() => (\r\n              <Search\r\n                moveBookCallback={this.moveBook}\r\n                currentBooks={this.state.books}\r\n                loadBooksHandler={this.loadBooksFromServer}\r\n              />\r\n            )}\r\n          />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter} from 'react-router-dom'\r\nimport App from './Components/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\r\n"],"sourceRoot":""}